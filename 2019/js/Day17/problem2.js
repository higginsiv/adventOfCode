module.exports = { solve: solve };
const { IntCode } = require('../common/IntCode.js');
const [SCAFFOLD, SPACE, ROBOT_UP, ROBOT_DOWN, ROBOT_LEFT, ROBOT_RIGHT] = [
    '#',
    '.',
    '^',
    'v',
    '<',
    '>',
];

function solve({ lines, rawData }) {
    let input = [
        'A,A,B,C,B,C,B,A,C,A\n',
        'R,8,L,12,R,8\n',
        'L,10,L,10,R,8\n',
        'L,12,L,12,L,10,R,10\n',
        'n\n',
    ]
        .map(convertToAscii)
        .flat();

    let ic = new IntCode(rawData, new Map([[0, 2]]), 0, input, []);
    const { output } = ic.run();

    return { value: output.pop() };
}

function convertToAscii(input) {
    return input.split('').map((char) => char.charCodeAt(0));
}

// My Grid
// ......#############...........................#############
// ......#...........#...........................#...........#
// ......#...........#...........................#...........#
// ......#...........#...........................#...........#
// ......#...........#...........................#...........#
// ......#...........#...........................#...........#
// ......#...........#.#########.........###########.........#
// ......#...........#.#.......#.........#.......#.#.........#
// ......#...........#############.......#.......#.#.........#
// ......#.............#.......#.#.......#.......#.#.........#
// ......#.............#.......#.#.....###########.#.........#
// ......#.............#.......#.#.....#.#.........#.........#
// ......###########...#.......#.#.....#.#.........#.#########
// ................#...#.......#.#.....#.#.........#.#........
// ................#...#.......#############.......#.#........
// ................#...#.........#.....#.#.#.......#.#........
// ................#...#.........#########.#.......###########
// ................#...#...............#...#.........#.......#
// ............^########...............#...#.........#.......#
// ................#...................#...#.........#.......#
// ................#...................###########...#.......#
// ................#.......................#.....#...#.......#
// ........#########.......................###########.......#
// ........#.....................................#...........#
// ........#.....................................#...........#
// ........#.....................................#...........#
// ........#.....................................#...........#
// ........#.....................................#...........#
// ........#.....................................#############
// ........#..................................................
// ........#..................................................
// ........#..................................................
// ........#..................................................
// ........#..................................................
// #########..................................................

// Paths from start to end, then separated by pattern

// R,8,L,12,R,8,
// R,8,L,12,R,8,
// L,10,L,10,R,8,
// L,12,L,12,L,10,R,10,
// L,10,L,10,R,8,
// L,12,L,12,L,10,R,10,
// L,10,L,10,R,8,
// R,8,L,12,R,8,
// L,12,L,12,L,10,R,10,
// R8,L,12,R,8

// A: R,8,L,12,R,8
// B: L,10,L,10,R,8
// C: L,12,L,12,L,10,R,10

// A,A,B,C,B,C,B,A,C,A
